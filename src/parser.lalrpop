use std::str::FromStr;
use crate::ast::*;

grammar;

pub YaccParser: Yacc<'input> = {
    <Rule*> => Yacc {
        rules: <>.into()
    }
}

Rule: YRule<'input> = {
    <left: id> colon pipe <tokensList: TokensList> semicolon
    => YRule {
        entry: left,
        allow_empty: true,
        tokens_list: tokensList.into()
    },
    <left: id> colon <tokensList: TokensList> semicolon
    => YRule {
        entry: left,
        allow_empty: false,
        tokens_list: tokensList.into()
    },
    <left: id> colon semicolon
    => YRule {
        entry: left,
        allow_empty: false,
        tokens_list: vec![]
    },
}

TokensList: Vec<YTokens<'input>> = {
    <mut v:((<Tokens> pipe)*)> <tokens: Tokens> => {
        v.push(tokens);
        v
    }
}

Tokens: YTokens<'input> = {
    <Token+> => YTokens {
        tokens: <>.into()
    }
}

Token: YToken<'input> = {
    <id>
    => YToken::Id(<>),
    <str_literal>
    => YToken::String(<>),
    <terminal>
    => YToken::Terminal(<>),
}

match {
    r":" => colon,
    r"|" => pipe,
    r";" => semicolon,
    r"'[^']*'" => str_literal,
    r"[A-Z_][A-Z0-9_]*" => terminal,
} else {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => id,
}